// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"go.adenix.dev/adderall"
	"go.adenix.dev/adderall/config"
	"go.adenix.dev/adderall/logger"
	"go.adenix.dev/adderall/server"
)

// Injectors from wire.go:

func InitializeServer() (*server.Server, func()) {
	appConfig := config.NewAppConfig()
	serverConfig := ProvideServerConfig(appConfig)
	factoryOptionConfig := adderall.ProvideServerFactoryOptionWithConfig(serverConfig)
	tracer := ProvideTracer()
	loggerLogger, cleanup := logger.NewLogger(tracer)
	factoryOptionLogger := adderall.ProvideServerFactoryOptionWithLogger(loggerLogger)
	factoryOptionTracer := adderall.ProvideServerFactoryOptionWithTracer(tracer)
	router := ProvideServerRouter()
	factoryOptionRouter := adderall.ProvideServerFactoryOptionWithRouter(router)
	v := adderall.ProvideServerFactoryOptions(factoryOptionConfig, factoryOptionLogger, factoryOptionTracer, factoryOptionRouter)
	factory := adderall.ProvideServerFactory(v)
	clientConfig := ProvideClientConfig(appConfig)
	clientFactoryOptionConfig := adderall.ProvideClientFactoryOptionWithConfig(clientConfig)
	clientFactoryOptionLogger := adderall.ProvideClientFactoryOptionWithLogger(loggerLogger)
	clientFactoryOptionTracer := adderall.ProvideClientFactoryOptionWithTracer(tracer)
	v2 := adderall.ProvideClientFactoryOptions(clientFactoryOptionConfig, clientFactoryOptionLogger, clientFactoryOptionTracer)
	clientFactory := adderall.ProvideClientFactory(v2)
	myService := MyService{
		ServerFactory: factory,
		ClientFactory: clientFactory,
	}
	serverServer := NewServer(myService)
	return serverServer, func() {
		cleanup()
	}
}

// wire.go:

var commonSet = wire.NewSet(config.NewAppConfig, logger.NewLogger, ProvideTracer,
	ProvideServerConfig,
	ProvideServerRouter,
	ProvideClientConfig, adderall.ProvideServerFactorySet, adderall.ProvideClientFactorySet,
)
