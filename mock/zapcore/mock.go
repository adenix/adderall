// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/zap/zapcore (interfaces: PrimitiveArrayEncoder)

// Package zapcore is a generated GoMock package.
package zapcore

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrimitiveArrayEncoder is a mock of PrimitiveArrayEncoder interface
type MockPrimitiveArrayEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockPrimitiveArrayEncoderMockRecorder
}

// MockPrimitiveArrayEncoderMockRecorder is the mock recorder for MockPrimitiveArrayEncoder
type MockPrimitiveArrayEncoderMockRecorder struct {
	mock *MockPrimitiveArrayEncoder
}

// NewMockPrimitiveArrayEncoder creates a new mock instance
func NewMockPrimitiveArrayEncoder(ctrl *gomock.Controller) *MockPrimitiveArrayEncoder {
	mock := &MockPrimitiveArrayEncoder{ctrl: ctrl}
	mock.recorder = &MockPrimitiveArrayEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrimitiveArrayEncoder) EXPECT() *MockPrimitiveArrayEncoderMockRecorder {
	return m.recorder
}

// AppendBool mocks base method
func (m *MockPrimitiveArrayEncoder) AppendBool(arg0 bool) {
	m.ctrl.Call(m, "AppendBool", arg0)
}

// AppendBool indicates an expected call of AppendBool
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendBool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendBool", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendBool), arg0)
}

// AppendByteString mocks base method
func (m *MockPrimitiveArrayEncoder) AppendByteString(arg0 []byte) {
	m.ctrl.Call(m, "AppendByteString", arg0)
}

// AppendByteString indicates an expected call of AppendByteString
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendByteString(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendByteString", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendByteString), arg0)
}

// AppendComplex128 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendComplex128(arg0 complex128) {
	m.ctrl.Call(m, "AppendComplex128", arg0)
}

// AppendComplex128 indicates an expected call of AppendComplex128
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendComplex128(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendComplex128", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendComplex128), arg0)
}

// AppendComplex64 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendComplex64(arg0 complex64) {
	m.ctrl.Call(m, "AppendComplex64", arg0)
}

// AppendComplex64 indicates an expected call of AppendComplex64
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendComplex64(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendComplex64", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendComplex64), arg0)
}

// AppendFloat32 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendFloat32(arg0 float32) {
	m.ctrl.Call(m, "AppendFloat32", arg0)
}

// AppendFloat32 indicates an expected call of AppendFloat32
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendFloat32(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFloat32", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendFloat32), arg0)
}

// AppendFloat64 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendFloat64(arg0 float64) {
	m.ctrl.Call(m, "AppendFloat64", arg0)
}

// AppendFloat64 indicates an expected call of AppendFloat64
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendFloat64(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFloat64", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendFloat64), arg0)
}

// AppendInt mocks base method
func (m *MockPrimitiveArrayEncoder) AppendInt(arg0 int) {
	m.ctrl.Call(m, "AppendInt", arg0)
}

// AppendInt indicates an expected call of AppendInt
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendInt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendInt", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendInt), arg0)
}

// AppendInt16 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendInt16(arg0 int16) {
	m.ctrl.Call(m, "AppendInt16", arg0)
}

// AppendInt16 indicates an expected call of AppendInt16
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendInt16(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendInt16", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendInt16), arg0)
}

// AppendInt32 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendInt32(arg0 int32) {
	m.ctrl.Call(m, "AppendInt32", arg0)
}

// AppendInt32 indicates an expected call of AppendInt32
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendInt32(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendInt32", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendInt32), arg0)
}

// AppendInt64 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendInt64(arg0 int64) {
	m.ctrl.Call(m, "AppendInt64", arg0)
}

// AppendInt64 indicates an expected call of AppendInt64
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendInt64(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendInt64", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendInt64), arg0)
}

// AppendInt8 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendInt8(arg0 int8) {
	m.ctrl.Call(m, "AppendInt8", arg0)
}

// AppendInt8 indicates an expected call of AppendInt8
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendInt8(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendInt8", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendInt8), arg0)
}

// AppendString mocks base method
func (m *MockPrimitiveArrayEncoder) AppendString(arg0 string) {
	m.ctrl.Call(m, "AppendString", arg0)
}

// AppendString indicates an expected call of AppendString
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendString(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendString", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendString), arg0)
}

// AppendUint mocks base method
func (m *MockPrimitiveArrayEncoder) AppendUint(arg0 uint) {
	m.ctrl.Call(m, "AppendUint", arg0)
}

// AppendUint indicates an expected call of AppendUint
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendUint(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendUint), arg0)
}

// AppendUint16 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendUint16(arg0 uint16) {
	m.ctrl.Call(m, "AppendUint16", arg0)
}

// AppendUint16 indicates an expected call of AppendUint16
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendUint16(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint16", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendUint16), arg0)
}

// AppendUint32 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendUint32(arg0 uint32) {
	m.ctrl.Call(m, "AppendUint32", arg0)
}

// AppendUint32 indicates an expected call of AppendUint32
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendUint32(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint32", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendUint32), arg0)
}

// AppendUint64 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendUint64(arg0 uint64) {
	m.ctrl.Call(m, "AppendUint64", arg0)
}

// AppendUint64 indicates an expected call of AppendUint64
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendUint64(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint64", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendUint64), arg0)
}

// AppendUint8 mocks base method
func (m *MockPrimitiveArrayEncoder) AppendUint8(arg0 byte) {
	m.ctrl.Call(m, "AppendUint8", arg0)
}

// AppendUint8 indicates an expected call of AppendUint8
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendUint8(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUint8", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendUint8), arg0)
}

// AppendUintptr mocks base method
func (m *MockPrimitiveArrayEncoder) AppendUintptr(arg0 uintptr) {
	m.ctrl.Call(m, "AppendUintptr", arg0)
}

// AppendUintptr indicates an expected call of AppendUintptr
func (mr *MockPrimitiveArrayEncoderMockRecorder) AppendUintptr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUintptr", reflect.TypeOf((*MockPrimitiveArrayEncoder)(nil).AppendUintptr), arg0)
}
